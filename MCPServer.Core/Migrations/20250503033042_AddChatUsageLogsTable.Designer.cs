// <auto-generated />
using System;
using MCPServer.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MCPServer.Core.Migrations
{
    [DbContext(typeof(McpServerDbContext))]
    [Migration("20250503033042_AddChatUsageLogsTable")]
    partial class AddChatUsageLogsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MCPServer.Core.Models.ApiLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RequestBody")
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ApiLogs");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("OwnedSessionIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@mcpserver.com",
                            IsActive = true,
                            LastLoginAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OwnedSessionIds = "[]",
                            PasswordHash = "AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P/sr5iWDk3SD5AktdojZ3zZSNz39BlOjgC7pE+tNvVLK9Hdl7eVkMmb3r07FHQNpLxRWVAdJtKjZ0+tS2IY3GWY=",
                            Roles = "[\"Admin\",\"User\"]",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MCPServer.Core.Models.ChatUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InputTokenCount")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("longtext");

                    b.Property<int>("OutputTokenCount")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .HasColumnType("longtext");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUsageLogs");
                });

            modelBuilder.Entity("MCPServer.Core.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RequestMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("RequestPath")
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContextWindow")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPer1KInputTokens")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostPer1KOutputTokens")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxTokens")
                        .HasColumnType("int");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<bool>("SupportsStreaming")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SupportsTools")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SupportsVision")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId", "ModelId")
                        .IsUnique();

                    b.ToTable("LlmModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContextWindow = 128000,
                            CostPer1KInputTokens = 0.005m,
                            CostPer1KOutputTokens = 0.015m,
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(1565),
                            Description = "OpenAI's most capable model for text, vision, and audio tasks",
                            IsEnabled = true,
                            MaxTokens = 4096,
                            ModelId = "gpt-4o",
                            Name = "GPT-4o",
                            ProviderId = 1,
                            SupportsStreaming = true,
                            SupportsTools = true,
                            SupportsVision = true
                        },
                        new
                        {
                            Id = 2,
                            ContextWindow = 128000,
                            CostPer1KInputTokens = 0.01m,
                            CostPer1KOutputTokens = 0.03m,
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(2388),
                            Description = "OpenAI's most capable model optimized for speed",
                            IsEnabled = true,
                            MaxTokens = 4096,
                            ModelId = "gpt-4-turbo",
                            Name = "GPT-4 Turbo",
                            ProviderId = 1,
                            SupportsStreaming = true,
                            SupportsTools = true,
                            SupportsVision = true
                        },
                        new
                        {
                            Id = 3,
                            ContextWindow = 16385,
                            CostPer1KInputTokens = 0.0005m,
                            CostPer1KOutputTokens = 0.0015m,
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(2391),
                            Description = "OpenAI's fastest and most cost-effective model",
                            IsEnabled = true,
                            MaxTokens = 4096,
                            ModelId = "gpt-3.5-turbo",
                            Name = "GPT-3.5 Turbo",
                            ProviderId = 1,
                            SupportsStreaming = true,
                            SupportsTools = true,
                            SupportsVision = false
                        },
                        new
                        {
                            Id = 4,
                            ContextWindow = 200000,
                            CostPer1KInputTokens = 0.015m,
                            CostPer1KOutputTokens = 0.075m,
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(2468),
                            Description = "Anthropic's most powerful model for highly complex tasks",
                            IsEnabled = true,
                            MaxTokens = 4096,
                            ModelId = "claude-3-opus-20240229",
                            Name = "Claude 3 Opus",
                            ProviderId = 2,
                            SupportsStreaming = true,
                            SupportsTools = true,
                            SupportsVision = true
                        },
                        new
                        {
                            Id = 5,
                            ContextWindow = 200000,
                            CostPer1KInputTokens = 0.003m,
                            CostPer1KOutputTokens = 0.015m,
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(2471),
                            Description = "Anthropic's balanced model for most tasks",
                            IsEnabled = true,
                            MaxTokens = 4096,
                            ModelId = "claude-3-sonnet-20240229",
                            Name = "Claude 3 Sonnet",
                            ProviderId = 2,
                            SupportsStreaming = true,
                            SupportsTools = true,
                            SupportsVision = true
                        },
                        new
                        {
                            Id = 6,
                            ContextWindow = 200000,
                            CostPer1KInputTokens = 0.00025m,
                            CostPer1KOutputTokens = 0.00125m,
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(2473),
                            Description = "Anthropic's fastest and most cost-effective model",
                            IsEnabled = true,
                            MaxTokens = 4096,
                            ModelId = "claude-3-haiku-20240307",
                            Name = "Claude 3 Haiku",
                            ProviderId = 2,
                            SupportsStreaming = true,
                            SupportsTools = true,
                            SupportsVision = true
                        });
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConfigSchema")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LlmProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiEndpoint = "https://api.openai.com/v1/chat/completions",
                            AuthType = "ApiKey",
                            ConfigSchema = "{\r\n                        \"type\": \"object\",\r\n                        \"properties\": {\r\n                            \"apiKey\": {\r\n                                \"type\": \"string\",\r\n                                \"description\": \"OpenAI API Key\"\r\n                            },\r\n                            \"organization\": {\r\n                                \"type\": \"string\",\r\n                                \"description\": \"OpenAI Organization ID (optional)\"\r\n                            }\r\n                        },\r\n                        \"required\": [\"apiKey\"]\r\n                    }",
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(615),
                            Description = "OpenAI's GPT models for text generation",
                            DisplayName = "",
                            IsEnabled = true,
                            Name = "OpenAI"
                        },
                        new
                        {
                            Id = 2,
                            ApiEndpoint = "https://api.anthropic.com/v1/messages",
                            AuthType = "ApiKey",
                            ConfigSchema = "{\r\n                        \"type\": \"object\",\r\n                        \"properties\": {\r\n                            \"apiKey\": {\r\n                                \"type\": \"string\",\r\n                                \"description\": \"Anthropic API Key\"\r\n                            }\r\n                        },\r\n                        \"required\": [\"apiKey\"]\r\n                    }",
                            CreatedAt = new DateTime(2025, 5, 3, 3, 30, 39, 169, DateTimeKind.Utc).AddTicks(2457),
                            Description = "Anthropic's Claude models for text generation",
                            DisplayName = "",
                            IsEnabled = true,
                            Name = "Anthropic"
                        });
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmProviderCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EncryptedCredentials")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProviderId", "UserId", "Name")
                        .IsUnique();

                    b.ToTable("LlmProviderCredentials");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CredentialId")
                        .HasColumnType("int");

                    b.Property<int>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InputTokens")
                        .HasColumnType("int");

                    b.Property<bool>("IsStreaming")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("OutputTokens")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CredentialId");

                    b.HasIndex("ModelId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("LlmUsageLogs");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Rag.Chunk", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Embedding")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Chunks");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Rag.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MCPServer.Core.Models.SessionData", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MCPServer.Core.Models.UsageMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("longtext");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MetricType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("UsageMetrics");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmModel", b =>
                {
                    b.HasOne("MCPServer.Core.Models.Llm.LlmProvider", "Provider")
                        .WithMany("Models")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmProviderCredential", b =>
                {
                    b.HasOne("MCPServer.Core.Models.Llm.LlmProvider", "Provider")
                        .WithMany("Credentials")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmUsageLog", b =>
                {
                    b.HasOne("MCPServer.Core.Models.Llm.LlmProviderCredential", "Credential")
                        .WithMany()
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MCPServer.Core.Models.Llm.LlmModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Credential");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MCPServer.Core.Models.Llm.LlmProvider", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
